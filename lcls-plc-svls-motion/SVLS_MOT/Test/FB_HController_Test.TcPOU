<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.11">
  <POU Name="FB_HController_Test" Id="{045ad5db-f4a7-4e2f-8ffb-b7e0a26c7aec}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_HController_Test EXTENDS FB_TestSuite
VAR
    MotionAxisDetAngle_Test1 : I_MotionAxis;
    MotionAxisDetH_Test1 : I_MotionAxis;
    fbCalculateHFromAngle_Test1 : FB_CalculateHFromAngle(
        D_tu := 1239.5,
        R_a := 1200,
        R_c := 90
    );
    fbExternalSetpointGenerator_Test1 : FB_ExternalSetpointGenerator(
        iMotionAxis := MotionAxisDetH_Test1
    );
    fbHController_Test1 : FB_HController(
        iMotionAxisDetAngle := MotionAxisDetAngle_Test1,
        iCalculateHFromAngle := fbCalculateHFromAngle_Test1,
        iHAxisExternalSetpointGenerator := fbExternalSetpointGenerator_Test1
    );
    nDetAngleEncoderState1_Test1 AT %Q* : WORD;
    nDetAngleEncoderComState_Test1 AT %Q* : WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
TestIntegrationExpectFunctional_Test1();
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{b69272d5-5539-4b28-b9fb-05d934859fe9}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    (* if TRUE, the retain variables are initialized (warm start / cold start)*)
    bInitRetains	: BOOL;
    (* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
    bInCopyCode	: BOOL;

    MotionAxisDetAngle_Test1 : I_MotionAxis;
    MotionAxisDetH_Test1 : I_MotionAxis;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.MotionAxisDetAngle_Test1 := MotionAxisDetAngle_Test1;
THIS^.MotionAxisDetH_Test1 := MotionAxisDetH_Test1;

fbExternalSetpointGenerator_Test1.FB_Init(
    bInitRetains := FALSE,
    bInCopyCode := FALSE,
    iMotionAxis := MotionAxisDetH_Test1
);

fbHController_Test1.FB_Init(
    bInitRetains := FALSE,
    bInCopyCode := FALSE,
    iMotionAxisDetAngle := MotionAxisDetAngle_Test1,
    iCalculateHFromAngle := fbCalculateHFromAngle_Test1,
    iHAxisExternalSetpointGenerator := fbExternalSetpointGenerator_Test1
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIntegrationExpectFunctional_Test1" Id="{2abd99a9-9b51-424f-a166-430ee3861092}">
      <Declaration><![CDATA[
METHOD PRIVATE TestIntegrationExpectFunctional_Test1
VAR_INST
    nTestStep : INT;
    tonTimeout : TON;
    tTimeout : TIME := T#10s;

    fTargetHAnglePositionDegrees : LREAL;
    fTargetHAnglePositionRadians : LREAL;
    fExpectedHPosition : LREAL;
    fAllowedDelta : LREAL := 1e-3;

    bToggle : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(__POUNAME());

IF bToggle THEN
    bToggle := FALSE;
    nDetAngleEncoderComState_Test1 := 2#0000_0000_0000_0000;
    nDetAngleEncoderState1_Test1 := 2#1010_0000_0000_0100;
ELSE
    bToggle := TRUE;
    nDetAngleEncoderComState_Test1 := 2#0000_0000_0000_0010;
    nDetAngleEncoderState1_Test1 := 2#1110_0000_0000_0100;
END_IF

fbExternalSetpointGenerator_Test1();
fbHController_Test1();

CASE nTestStep OF
    0:
        MotionAxisDetAngle_Test1.Power(
            Enable := TRUE,
            Enable_Positive := TRUE,
            Enable_Negative := TRUE,
        );
        MotionAxisDetH_Test1.Power(
            Enable := TRUE,
            Enable_Positive := TRUE,
            Enable_Negative := TRUE,
        );

        nTestStep := nTestStep + 1;
    1:
        IF MotionAxisDetAngle_Test1.PowerIsEnabled THEN
            nTestStep := nTestStep + 1;
        END_IF
    2:
        fTargetHAnglePositionDegrees := 5.0;
        fTargetHAnglePositionRadians := DEG_TO_RAD(fTargetHAnglePositionDegrees);

        MotionAxisDetAngle_Test1.MoveAbsolute(
            Position := fTargetHAnglePositionDegrees,
            Velocity := 1.0
        );

        nTestStep := nTestStep + 1;
    3:
        IF MotionAxisDetAngle_Test1.MeasuredPosition = fTargetHAnglePositionDegrees THEN
            nTestStep := nTestStep + 1;
        END_IF
    4:
        fExpectedHPosition := fbCalculateHFromAngle_Test1.CalculateH(
            Radians := fTargetHAnglePositionRadians
        );
        IF ABS(MotionAxisDetH_Test1.MeasuredPosition - fExpectedHPosition) <= fAllowedDelta THEN
            nTestStep := nTestStep + 1;
        END_IF
    5:
        // Done
END_CASE


IF nTestStep = 5 THEN
    TEST_FINISHED();
ELSIF tonTimeout.Q THEN
    AssertTrue(
        Condition := FALSE,
        Message := CONCAT('Timer timed out at step: ', TO_STRING(nTestStep))
    );

    TEST_FINISHED();
ELSE
    tonTimeout(IN := TRUE, PT := tTimeout);
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>